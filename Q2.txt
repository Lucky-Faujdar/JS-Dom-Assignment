Q2. Explain the concept of event delegation and provide a scenario where it is beneficial.
ANSWER: 

Event delegation is a technique in JavaScript where an event listener is added to a parent element, and this single listener is used to manage events triggered by its child elements.

This is possible because of event bubbling, where events propagate from the innermost (target) element outward to its ancestors.

Why is it useful?

It improves performance, especially when you have many child elements.

It is useful when child elements are added dynamically after the page has loaded.


Example Scenario:

Consider a <ul> list with many <li> items, or items added after a user clicks a "Load More" button. Instead of attaching a click event to each <li>, you can add one listener to the <ul> and use event.target to know which <li> was clicked.

document.querySelector('ul').addEventListener('click', function(event) {
  if (event.target.tagName === 'LI') {
    alert('You clicked on: ' + event.target.textContent);
  }
});

